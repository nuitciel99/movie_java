package serivce;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.NoArgsConstructor;
import util.MovieUtils;
import vo.Customer;
import vo.Movie;
import vo.Reservation;
@NoArgsConstructor(access = AccessLevel.PRIVATE)
@Getter
public class ReservService { // 고객에서 ID 받아와야함
	@Getter// 유틸 세이브 겟터 호출 필요 메서드
	private static final ReservService RESERV_SERVICE = new ReservService();
	public static ReservService getInstance() {
		return RESERV_SERVICE;
	}

//	private List<Reservation> reservations = new ArrayList<Reservation>();
	private List<Reservation> reservations = MovieUtils.load("resevations");
	private List<Movie> movies = MovieService.getInstance().getMovies();
	MovieService movieService = new MovieService();

	public void reservMo() { // 예매 메소드
		movieService.movieList();
		int movieNo = 0;
		
		try {
			movieNo = MovieUtils.nextInt("영화를 선택하세요(숫자 입력)");
			printSeat(movieNo);
		} catch (NumberFormatException e) {
			movieNo = MovieUtils.nextInt("잘못된 입력입니다. 숫자로 입력해주세요.");
			printSeat(movieNo);
		}catch (RuntimeException e) {
			System.out.println(e.getMessage());
		}
		
		char InputSeat = MovieUtils.nextLine("좌석 선택 (X : 예약된 좌석)").charAt(0);
		if (InputSeat < 'A' || InputSeat > 'P') {
			System.out.println("잘못된 좌석 선택입니다. 다시 예매하시겠습니까??");
			int input = MovieUtils.nextInt("1. 다시 예매하기  2. 첫 화면으로 가기");
			switch (input) {
			case 1:
				reservMo();
				return;
			case 2:
				return;
			default:
				break;
			}
		}
		
		int seatCol = (int) InputSeat - 65;
		
		String id = CustomerService.getInstance().getLoginUser().getId();
		
		SimpleDateFormat sdf = new SimpleDateFormat("yy/MM/dd HH:mm:ss");
		Date date = new Date();
		String reservDate = sdf.format(date);
		System.out.println("영화 '" + movies.get(movieNo - 1).getMovie() + "'의 좌석 " + (char)(seatCol+65) + " 예매 완료. 예매 아이디 : " + id + " | 예매 시간 : " + reservDate);
		
		insert(Reservation.builder().seatCol(seatCol).movieNo(movieNo).id(id).reservDate(reservDate).build());
		MovieUtils.save();

		// reservNo : insert method에서 다룸
//		int reservNo = reservations.size() == 0 ? 1 : reservations.get(reservations.size() - 1).getReservNo() + 1;

		//		try {
//			ObjectInputStream ois =  new ObjectInputStream(new FileInputStream("reservation.ser"));
//			reservations = (List<Reservation>) ois.readObject();
//		} catch (FileNotFoundException e) {
//			reservations.add(new Reservation(reservNo, seatCol, movieNo, id, reservDate));
//		}catch (IOException e) {
//            e.printStackTrace();
//        } catch (ClassNotFoundException e) {
//            e.printStackTrace();
//        }
		
	}
		


	private Reservation findBy(int getReservNo) {
 		for (int i = 0; i < reservations.size(); i++) {
 			if (getReservNo == reservations.get(i).getReservNo()) {
 				return reservations.get(i);
 			}
 		}
 		return null;
 	}

	public void cancel() {
 		int getReservNo = MovieUtils.nextInt("취소하실 예약 번호를 입력해주세요");
 		Reservation reservation = findBy(getReservNo);
 		if (reservation != null) {
 			System.out.println(reservation);
 		} else if (reservation == null) {
 			System.out.println("없는 예약 번호입니다.");
 			return;
 		}
 		switch (MovieUtils.nextLine("정말 예매를 취소하시겠습니까??(y/n)").toUpperCase()) {
 		case "Y":
 //                reservations.get(findBy(getReservNo));
 			reservations.remove(reservation);
 			System.out.println("예매 취소가 완료되었습니다.");
 			break;
 		case "N":
 			System.out.println("첫 화면으로 전환합니다.");
 			break;
 		default:
 			break;
 		}
 		MovieUtils.save();
 	}
	
	public List<Reservation> findListBy(String id) {
		List<Reservation> ret = new ArrayList<>();
		
		for(Reservation r : reservations) {
			if(r.getId().equals(id)) {
				ret.add(r);
			}
		}
		return ret;
	}
	
	public boolean isReserv(String id, int movieNo) {
		for(Reservation r : reservations) {
			if(r.getId().equals(id) && r.getMovieNo() == movieNo) {
				return true;
			}
		}
		return false;
	}
	
	public void printSeat(int movieNo) {
		List<Integer> seats = new ArrayList<Integer>();
		if (reservations == null) {
		    reservations = new ArrayList<Reservation>();
		}
		for(Reservation r : reservations) {
			if(r.getMovieNo() == movieNo) {
				seats.add(r.getSeatCol());
			}
		}
//		System.out.println(seats);
		for(int i = 0 ; i < 16 ; i++) {
			if(seats.contains(i)) {
				System.out.print('X');
			}
			else {
				System.out.print((char)(i + 65));
			}
			if(i % 4 == 3)
			System.out.println();
		}
	}
	
	private int insert(Reservation reservation) {
		int reservNo = reservations.size() == 0 ? 1 : reservations.get(reservations.size()-1).getReservNo() + 1;
		Reservation reservation2 = Reservation.builder()
				.reservNo(reservNo)
				.seatCol(reservation.getSeatCol())
				.movieNo(reservation.getMovieNo())
				.id(reservation.getId())
				.reservDate(reservation.getReservDate())
				.build();
		return reservations.add(reservation2) ? 1: 0;
	}
	
	
	
//	public static void main(String[] args) {
//		CustomerService cs = CustomerService.getInstance();
//		cs.setLoginUser(Customer.builder().id("javaman").build());
//		
//		System.out.println(cs.isLogin());
//		
//		ReservService reservService = ReservService.getInstance();
//		System.out.println(reservService.movies);
//		
//		reservService.reservations.add(new Reservation(1, 0, 1, "javaman", new SimpleDateFormat("yy/MM/dd HH:mm:ss").format(System.currentTimeMillis())));
//		reservService.reservations.add(new Reservation(2, 1, 1, "javaman", new SimpleDateFormat("yy/MM/dd HH:mm:ss").format(System.currentTimeMillis())));
//		reservService.reservations.add(new Reservation(3, 3, 1, "javaman", new SimpleDateFormat("yy/MM/dd HH:mm:ss").format(System.currentTimeMillis())));
//		reservService.reservations.add(new Reservation(4, 2, 2, "javaman", new SimpleDateFormat("yy/MM/dd HH:mm:ss").format(System.currentTimeMillis())));
//		
////		System.out.println(reservService.reservations);
//		reservService.reservations.forEach(System.out::println);
//		
//		reservService.printSeat(1);
//		reservService.Cancel();
//		reservService.printSeat(1);
//		reservService.printSeat(2);
//	}
}