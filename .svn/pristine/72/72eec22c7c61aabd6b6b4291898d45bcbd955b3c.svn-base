package serivce;

import static util.MovieUtils.*;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.List;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.Getter;
import lombok.NoArgsConstructor;
import util.MovieUtils;
import vo.Customer;
import vo.Movie;
import vo.Reservation;
import vo.Review;

@AllArgsConstructor
@NoArgsConstructor(access = AccessLevel.PRIVATE)
@Data
@Getter

public class CustomerService {
	private static CustomerService instance; // 싱글톤
	private List<Customer> customers = MovieUtils.load("customers");
//	@Getter
	private Customer loginUser;

	public static CustomerService getInstance() {
		if (instance == null) {
			instance = new CustomerService();
		}
		return instance;

	}

	public Customer findBy(String id) { // 파인드바이로 예매자 아이디를 비교
		for (Customer member : customers) {
			if (member.getId().equals(id)) {
				return member;
			}
		}
		return null;
	}
	
	// 회원 가입 레지

	public void register() {
		Customer addMember = new Customer();
		// 사용자로부터 입력받을 ID
		String id = nextLine("아이디를 입력하세요 > ");
		
		Customer c = findBy(id);
		if(c != null) {
			System.out.println("등록된 사람의 아이디 : " + c.getId());
			System.out.println("동일한 아이디가 존재합니다");
			return;
		}
			
//		[1, 2, 3]
		addMember.setId(id); // id를 저장

		// 사용자에게 입력받을 패스워드
		String pw = nextLine("비밀번호를 입력하세요 > ");
		addMember.setPw(pw); // 비밀번호를 저장
		int no = customers.size() == 0 ? 1 : customers.get(customers.size() - 1).getNo() + 1;
		addMember.setNo(no);
//		} // no로 회원 나열 하기 // 아이디에 대한 고유 번호 삭제 수정시 번호로 할수있게
		System.out.println("===================================================================================================== 날짜 / 시간============");
		System.out.println("회원번호 : " + addMember.getNo() + " 아이디 : " + id + ", 비밀번호 : " + pw + "입니다. / "
				+ "가입 날짜 / 시간 : " + addMember.getRegdate());
		System.out.println("=====================================================================================================");

		customers.add(addMember);

		System.out.println(customers.toString());
		MovieUtils.save();
	}

	public void login() {

		String id = nextLine("아이디를 입력하세요");
		String pw = nextLine("비밀번호를 입력하세요");
		Customer foundMember = findBy(id);


		if (foundMember == null) {
			System.out.println("가입된 사용자의 아이디가 아닙니다");
			return;
		}

		if (!foundMember.getPw().equals(pw)) {
			System.out.println("비밀번호가 일치하지 않습니다");
			return;
		}

		loginUser = foundMember;
		System.out.println("로그인 성공");
		System.out.println(loginUser);
	}

	public void list() { // 예매 확인
		ReservService reservService = ReservService.getInstance(); // 종윤 예매 서비스 가져오기 싱글톤

		System.out.println("=====================================================================================================");
		System.out.println("예매 번호           상영관           아이디            좌석번호                 예매 일시");
		System.out.println("=====================================================================================================");
		List<Reservation> reservations = reservService.findListBy(loginUser.getId());
		if(reservations.isEmpty()) {
			System.out.println("예매 내역이 없습니다");
			return;
		}
		
		for (Reservation r : reservations) {
			System.out.println(r);
		}
//		System.out.println("=====================================================================================================");
//		System.out.println("목록 조회 list() 보이드 진입");
		return;
	}


	// 로그아웃
	public void logout() {
		loginUser = null;

	}

	// 로그인 여부 확인
	public boolean isLogin() {
		return loginUser != null;
	}

	//// pk를 통한 단일 탐색 (현재 소스에서는 인덱스를 반환) 인덱스 대신 고객인스턴스 반환

	public void remove() {
		ReservService reservService = ReservService.getInstance();
		ReviewService reviewService = ReviewService.getInstance();

		List<Reservation> reservations = reservService.findListBy(loginUser.getId());
		if(!reservations.isEmpty()) {
			System.out.println("예매 내역이 있습니다");
			int input = MovieUtils.nextInt("1.예매취소 처리 2. 취소");
			if(input != 1) {
				return;
			}
			reservService.allCancel();
			
			// 회원아이디를 기반으로 예매 일괄취소
			
		}
		
		List<Review> reviews = reviewService.getMyReviews();
		if(!reviews.isEmpty()) {
			System.out.println("리뷰 작성 내역이 있습니다.");
			int input = MovieUtils.nextInt("1.리뷰 일괄 삭제 처리 2. 취소");
			if(input != 1) {
				return;
			}
			
			// 리뷰 일괄 삭제
			reviewService.myReviewRemove();
		}
		String pw = nextLine("삭제 하시려면 비밀번호를 입력하세요");
		if (loginUser.getPw().equals(pw)) {
			customers.remove(loginUser);
			System.out.println("회원 탈퇴되었습니다.");
			logout();
		}
		MovieUtils.save();
	}
}